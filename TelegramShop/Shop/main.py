import asyncio
import config
import logging
import start
import sql
import util
import text
import keyboards
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=config.Token)
#loop = asyncio.get_event_loop()
storage = MemoryStorage()
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher(bot, storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db = sql.sql_start()


problemkb = InlineKeyboardMarkup(row_width=1)
problem_chbtn = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='data_change')
problem_tbtn = InlineKeyboardButton(text='–ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='payout_help')
problemkb.add(problem_chbtn).add(problem_tbtn)


addgoodkb = InlineKeyboardMarkup(row_width=1)
addgoodkb_btn = InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data='good_add')
addgoodkb.add(addgoodkb_btn)




@dp.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    await bot.send_message(731620137, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å : '+str(message.from_user.id)+' –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è')
    sql.add_user(
        db,
        str(message.from_user.id),
        str(message.from_user.first_name),
        '@'+str(message.from_user.username),
        str(message.from_user.language_code),
        util.get_date()
    )
    print(util.get_date(), '–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç –æ—Ç', str(message.from_user.id))
    await message.answer(text.start_message,
                         reply_markup=keyboards.MainKeyBoard())

@dp.message_handler()
async def kb_answer(message: types.Message):
    if message.text == 'üé´–ö–∞—Ç–∞–ª–æ–≥üé≤üé≠':
        print(util.get_date(), '–ó–∞–ø—Ä–æ—Å –∫–∞—Ç–∞–ª–æ–≥–∞ –æ—Ç ', str(message.from_user.id))
        for gn in sql.get_good_name(db):
            print(gn)
            good_name = gn[0]
            print(good_name)
            good_number = str(sql.get_by_number_name(db, str(good_name)))
            print(good_number)
            photo = str(config.GOODS_IMG_PATH)+str(good_number)+'.jpeg'
            print(photo)
            good_price = str(sql.get_price_by_number(db, good_number))
            print(good_price)
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=open(photo, 'rb')
            )
            await bot.send_message(
                message.from_user.id,
                text=str(good_name)+'\n–¶–µ–Ω–∞ : '+str(good_price),
                reply_markup=addgoodkb
            )

    elif message.text == 'üé©–ö–æ—Ä–∑–∏–Ω–∞üìë‚öñ':
        print(util.get_date(), '–ó–∞–ø—Ä–æ—Å –ø—Ä–∞–≤–∏–ª –æ—Ç ', str(message.from_user.id))
        await bot.send_message(message.from_user.id, text='–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ : ')
        print(util.get_date(), '–ó–∞–ø—Ä–æ—Å –∫–∞—Ç–∞–ª–æ–≥–∞ –æ—Ç ', str(message.from_user.id))
        for good_number in sql.get_good_name(db):
            print(good_number)
            photo = str(config.GOODS_IMG_PATH) + str(good_number) + '.jpeg'
            good_name = str(sql.get_name_by_number(db, int(good_number)))
            good_price = str(sql.get_price_by_number(db, int(good_number)))
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=open(photo, 'rb')
            )
            await bot.send_message(
                message.from_user.id,
                text=str(good_name) + '\n–¶–µ–Ω–∞ : ' + str(good_price),
                reply_markup=addgoodkb
            )

    if message.text == 'üíµ–ó–∞–∫–∞–∑üíºüèß':
        print(util.get_date(), '–ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –æ—Ç ', str(message.from_user.id))

    if message.text == 'üíµ–ü—Ä–æ—Ñ–∏–ª—åüíºüèß':
        id = str(message.from_user.id)
        zakaz_number = str(sql.get_zakaz_by_id(db, id))
        await message.answer(text="\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å : "+id+
                             "\n–ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ : "+zakaz_number+
                             "\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ",
                             reply_markup=problemkb)
        print(util.get_date(), '–ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –æ—Ç ', str(message.from_user.id))


@dp.callback_query_handler(lambda cbq: cbq.data == 'good_add')
async def pay_in(callback: types.CallbackQuery):
    print(callback.from_user.values)
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '
                                                 '\n/pay  Ÿ©(‚óï‚Äø‚óïÔΩ°)€∂')

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():

    await dp.start_polling(bot)

# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    start.start_info()
    sql.create_tables(db)
    sql.add_test_goods(db)
    # loop.create_task(lotto_scheduler())
    asyncio.run(main())

# See PyCharm help at https://www.jetbrains.com/help/pycharm/
